<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				width="42" height="42"
				creationComplete="itemrenderer1_creationCompleteHandler(event)"
				autoDrawBackground="false" xmlns:component="component.*">
	<fx:Script>
		<![CDATA[
			import model.SystemDataModel;
			
			import mx.core.DragSource;
			import mx.core.IUIComponent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
			import sceneModule.event.MediatorRegisterItemEuipmentEvent;
			//当前格子是否处于锁定状态
			public var curTileIsClock:Boolean = false;
			
			//当前拖拽类型
			public var dragType:String;
			
			//拖拽源来自Package
			public static var FROMPACKAGE:String = "fromPackage";
			
			//拆分装备
			public const SPLITITEM:String = "splitItem"; 
			//拆分的数量
			public var splitNum:int;
			//回购
			public const HUIGOU:String = "huigou";
			//购买
			public const GOUMAI:String = "goumai";
			
			import model.ProConst;
			//获取装备图标路径
			public function setEquipmentUrl(s:String,t:int,state:int):String{
				if(state == 0){
					//未开放
					curTileIsClock = false;
					return "assets/role/clockPackage.png";
				}else{
					curTileIsClock = true;
					if(t == 0){
						return '';
					}else{
						var url:String = ProConst.getImageResUrl(t);
						url += (s + '.png');
						return url
					}
				}
			}
			/**
			 * 物品的层叠数
			 */
			private function getItemStack(value:int):String{
				var itemStack:String = "";
				if(value > 1){
					itemStack = value.toString();
				}
				return itemStack;
			}
			
			/**
			 * 鼠标单击事件
			 */
			public function onClick(evt:MouseEvent):void{
				if(data && data.id){
					var iu:IUIComponent=evt.target as IUIComponent;
					var ds:DragSource=new DragSource();
				    ds.addData(data, MainMenuEquipmentItemRender.FROMPACKAGE);
				    //当前装备的部位用于左侧装备栏的效果
					SystemDataModel.bodyPos = this.data.bodyType;
					var dragProxy:Image = new Image();
					dragProxy.width = 42;
					dragProxy.height = 42;
					dragProxy.source = equipImg.source;
					DragManager.doDrag(iu, ds, evt,dragProxy); // 开始拖动这个物体
				}
			}

			protected function itemrenderer1_creationCompleteHandler(event:FlexEvent):void
			{
				dispatchEvent(new MediatorRegisterItemEuipmentEvent(MediatorRegisterItemEuipmentEvent.MEDIATORREGISTERCOMMISSIONITEMEUIPMENT,this,true));
			}

		]]>
	</fx:Script>
	<mx:Image id="equipImg" source="{setEquipmentUrl(data.icon,data.type,data.tileState)}" width="100%" height="100%"/>
	<component:CrotaBasicLabel text="{getItemStack(data.stack)}" textAlign="right" x="0" y="30" fontSize="10" styleName="ROLEINFOTEXTFORMAT" width="42"/>
	<mx:Image id="borderOverEffectImg" source='assets/pack/packOverBorder.png' visible="false"/>
</s:ItemRenderer>
